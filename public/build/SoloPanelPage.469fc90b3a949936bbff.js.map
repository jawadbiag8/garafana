{"version":3,"sources":["webpack:///./public/app/features/dashboard/containers/SoloPanelPage.tsx"],"names":["SoloPanelPage","Component","state","panel","notFound","componentDidMount","match","route","this","props","initDashboard","urlSlug","params","slug","urlUid","uid","urlType","type","routeName","fixUrl","getPanelId","parseInt","queryParams","panelId","componentDidUpdate","prevProps","dashboard","expandParentRowFor","getPanelById","setState","render","className","width","height","isEditing","isViewing","isInView","mapDispatchToProps","hot","module","connect","getModel"],"mappings":"uPA0BO,MAAMA,UAAsBC,YAAwB,mCACzDC,MAAe,CACbC,MAAO,KACPC,UAAU,GAGZC,oBACE,MAAM,MAAEC,EAAF,MAASC,GAAUC,KAAKC,MAE9BD,KAAKC,MAAMC,cAAc,CACvBC,QAASL,EAAMM,OAAOC,KACtBC,OAAQR,EAAMM,OAAOG,IACrBC,QAASV,EAAMM,OAAOK,KACtBC,UAAWX,EAAMW,UACjBC,QAAQ,IAIZC,aAAqB,MACnB,OAAOC,SAAQ,UAACb,KAAKC,MAAMa,YAAYC,eAAxB,QAAmC,IAAK,IAGzDC,mBAAmBC,GACjB,MAAM,UAAEC,GAAclB,KAAKC,MAE3B,GAAKiB,KAKAD,EAAUC,WAAaD,EAAUC,UAAUX,MAAQW,EAAUX,KAAK,CACrE,MAAMQ,EAAUf,KAAKY,aAGrBM,EAAUC,mBAAmBJ,GAE7B,MAAMpB,EAAQuB,EAAUE,aAAaL,GAErC,IAAKpB,EAEH,YADAK,KAAKqB,SAAS,CAAEzB,UAAU,IAI5BI,KAAKqB,SAAS,CAAE1B,WAIpB2B,SACE,MAAM,UAAEJ,GAAclB,KAAKC,OACrB,SAAEL,EAAF,MAAYD,GAAUK,KAAKN,MAEjC,OAAIE,EACK,sBAAK2B,UAAU,oBAAf,2BAAkDvB,KAAKY,aAAvD,gBAGJjB,GAAUuB,EAKb,qBAAKK,UAAU,aAAf,SACE,cAAC,IAAD,UACG,EAAGC,QAAOC,YACK,IAAVD,EACK,KAGP,cAAC,IAAD,CACEA,MAAOA,EACPC,OAAQA,EACRP,UAAWA,EACXvB,MAAOA,EACP+B,WAAW,EACXC,WAAW,EACXC,UAAU,QAlBpB,MAAO,qEA4Bb,MAIMC,EAAqB,CACzB3B,mBAGa4B,wBAAIC,EAAJD,CAAYE,kBARFtC,IAAD,CACtBwB,UAAWxB,EAAMwB,UAAUe,aAOuBJ,EAAzBG,CAA6CxC,K","file":"SoloPanelPage.469fc90b3a949936bbff.js","sourcesContent":["import React, { Component } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { DashboardPanel } from '../dashgrid/DashboardPanel';\nimport { initDashboard } from '../state/initDashboard';\nimport { StoreState } from 'app/types';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nexport interface DashboardPageRouteParams {\n  uid?: string;\n  type?: string;\n  slug?: string;\n}\n\nexport interface Props extends GrafanaRouteComponentProps<DashboardPageRouteParams, { panelId: string }> {\n  initDashboard: typeof initDashboard;\n  dashboard: DashboardModel | null;\n}\n\nexport interface State {\n  panel: PanelModel | null;\n  notFound: boolean;\n}\n\nexport class SoloPanelPage extends Component<Props, State> {\n  state: State = {\n    panel: null,\n    notFound: false,\n  };\n\n  componentDidMount() {\n    const { match, route } = this.props;\n\n    this.props.initDashboard({\n      urlSlug: match.params.slug,\n      urlUid: match.params.uid,\n      urlType: match.params.type,\n      routeName: route.routeName,\n      fixUrl: false,\n    });\n  }\n\n  getPanelId(): number {\n    return parseInt(this.props.queryParams.panelId ?? '0', 10);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { dashboard } = this.props;\n\n    if (!dashboard) {\n      return;\n    }\n\n    // we just got a new dashboard\n    if (!prevProps.dashboard || prevProps.dashboard.uid !== dashboard.uid) {\n      const panelId = this.getPanelId();\n\n      // need to expand parent row if this panel is inside a row\n      dashboard.expandParentRowFor(panelId);\n\n      const panel = dashboard.getPanelById(panelId);\n\n      if (!panel) {\n        this.setState({ notFound: true });\n        return;\n      }\n\n      this.setState({ panel });\n    }\n  }\n\n  render() {\n    const { dashboard } = this.props;\n    const { notFound, panel } = this.state;\n\n    if (notFound) {\n      return <div className=\"alert alert-error\">Panel with id {this.getPanelId()} not found</div>;\n    }\n\n    if (!panel || !dashboard) {\n      return <div>Loading & initializing dashboard</div>;\n    }\n\n    return (\n      <div className=\"panel-solo\">\n        <AutoSizer>\n          {({ width, height }) => {\n            if (width === 0) {\n              return null;\n            }\n            return (\n              <DashboardPanel\n                width={width}\n                height={height}\n                dashboard={dashboard}\n                panel={panel}\n                isEditing={false}\n                isViewing={false}\n                isInView={true}\n              />\n            );\n          }}\n        </AutoSizer>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  dashboard: state.dashboard.getModel(),\n});\n\nconst mapDispatchToProps = {\n  initDashboard,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(SoloPanelPage));\n"],"sourceRoot":""}